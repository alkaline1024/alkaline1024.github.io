{"version":3,"file":"plugin.server.mjs","sources":["../../../../../../../../node_modules/@nuxtjs/color-mode/dist/runtime/plugin.server.js"],"sourcesContent":["import { reactive, ref } from \"vue\";\nimport { defineNuxtPlugin, isVue2, isVue3, useHead, useState, useRouter, useRequestHeaders } from \"#imports\";\nimport { preference, hid, script, dataValue, storage, storageKey } from \"#color-mode-options\";\nconst addScript = (head) => {\n  head.script = head.script || [];\n  head.script.push({\n    hid,\n    innerHTML: script\n  });\n  const serializeProp = \"__dangerouslyDisableSanitizersByTagID\";\n  head[serializeProp] = head[serializeProp] || {};\n  head[serializeProp][hid] = [\"innerHTML\"];\n};\nexport default defineNuxtPlugin((nuxtApp) => {\n  const colorMode = nuxtApp.ssrContext?.islandContext ? ref({}) : useState(\"color-mode\", () => reactive({\n    preference,\n    value: preference,\n    unknown: true,\n    forced: false\n  })).value;\n  const htmlAttrs = {};\n  if (isVue2) {\n    const app = nuxtApp.nuxt2Context.app;\n    if (typeof app.head === \"function\") {\n      const originalHead = app.head;\n      app.head = function() {\n        const head = originalHead.call(this) || {};\n        addScript(head);\n        head.htmlAttrs = htmlAttrs;\n        return head;\n      };\n    } else {\n      addScript(app.head);\n      app.head.htmlAttrs = htmlAttrs;\n    }\n  }\n  if (isVue3) {\n    if (storage === \"cookie\") {\n      const { cookie } = useRequestHeaders([\"cookie\"]);\n      const [, value] = cookie?.split(\"; \").map((s) => s.split(\"=\")).find(([k]) => k === storageKey) ?? [];\n      if (value) {\n        colorMode.preference = value;\n      }\n    }\n    useHead({ htmlAttrs });\n  }\n  useRouter().afterEach((to) => {\n    const forcedColorMode = isVue2 ? to.matched[0]?.components.default?.options?.colorMode : to.meta.colorMode;\n    if (forcedColorMode && forcedColorMode !== \"system\") {\n      colorMode.value = htmlAttrs[\"data-color-mode-forced\"] = forcedColorMode;\n      if (dataValue) {\n        htmlAttrs[`data-${dataValue}`] = colorMode.value;\n      }\n      colorMode.forced = true;\n    } else if (forcedColorMode === \"system\") {\n      console.warn(\"You cannot force the colorMode to system at the page level.\");\n    }\n  });\n  nuxtApp.provide(\"colorMode\", colorMode);\n});\n"],"names":[],"mappings":";;;;;;AAaA,MAAA,4DAAe,iBAAiB,CAAC,YAAY;;AAC3C,QAAM,cAAY,aAAQ,eAAR,mBAAoB,iBAAgB,IAAI,CAAE,CAAA,IAAI,SAAS,cAAc,MAAM,SAAS;AAAA,IACpG;AAAA,IACA,OAAO;AAAA,IACP,SAAS;AAAA,IACT,QAAQ;AAAA,EACT,CAAA,CAAC,EAAE;AACJ,QAAM,YAAY,CAAE;AAgBR;AAQV,YAAQ,EAAE,WAAW;AAAA,EACzB;AACE,YAAW,EAAC,UAAU,CAAC,OAAO;AAC5B,UAAM,kBAAmF,GAAG,KAAK;AACjG,QAAI,mBAAmB,oBAAoB,UAAU;AACnD,gBAAU,QAAQ,UAAU,wBAAwB,IAAI;AAIxD,gBAAU,SAAS;AAAA,IACzB,WAAe,oBAAoB,UAAU;AACvC,cAAQ,KAAK,6DAA6D;AAAA,IAChF;AAAA,EACA,CAAG;AACD,UAAQ,QAAQ,aAAa,SAAS;AACxC,CAAC;","x_google_ignoreList":[0]}