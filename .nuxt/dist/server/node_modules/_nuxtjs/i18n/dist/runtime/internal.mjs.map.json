{"file":"internal.mjs","mappings":"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","names":["useNuxtCookie","useCookie"],"sources":["../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/internal.js"],"sourcesContent":["import { isArray, isString, isObject } from \"@intlify/shared\";\nimport { hasProtocol } from \"ufo\";\nimport isHTTPS from \"is-https\";\nimport {\n  useRequestHeaders,\n  useRequestEvent,\n  useCookie as useNuxtCookie,\n  useRuntimeConfig,\n  useNuxtApp,\n  useRouter\n} from \"#imports\";\nimport { NUXT_I18N_MODULE_ID, DEFAULT_COOKIE_KEY, isSSG, localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { findBrowserLocale, getLocalesRegex, getRouteName } from \"./routing/utils.js\";\nimport { initCommonComposableOptions } from \"./utils.js\";\nimport { createLogger } from \"#nuxt-i18n/logger\";\nexport function formatMessage(message) {\n  return NUXT_I18N_MODULE_ID + \" \" + message;\n}\nexport function defineGetter(obj, key, val) {\n  Object.defineProperty(obj, key, { get: () => val });\n}\nexport function wrapComposable(fn, common = initCommonComposableOptions()) {\n  return (...args) => fn(common, ...args);\n}\nexport function parseAcceptLanguage(input) {\n  return input.split(\",\").map((tag) => tag.split(\";\")[0]);\n}\nexport function getBrowserLocale() {\n  let ret;\n  const logger = /* @__PURE__ */ createLogger(\"getBrowserLocale\");\n  if (import.meta.client) {\n    if (navigator.languages) {\n      ret = findBrowserLocale(normalizedLocales, navigator.languages);\n      __DEBUG__ && logger.log(\"(navigator.languages, ret) -\", navigator.languages, ret);\n    }\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"accept-language\"]);\n    __DEBUG__ && logger.log(\"accept-language\", header);\n    const accept = header[\"accept-language\"];\n    if (accept) {\n      ret = findBrowserLocale(normalizedLocales, parseAcceptLanguage(accept));\n      __DEBUG__ && logger.log(\"ret\", ret);\n    }\n  }\n  return ret;\n}\nexport function getI18nCookie() {\n  const detect = runtimeDetectBrowserLanguage();\n  const cookieKey = detect && detect.cookieKey || DEFAULT_COOKIE_KEY;\n  const date = /* @__PURE__ */ new Date();\n  const cookieOptions = {\n    expires: new Date(date.setDate(date.getDate() + 365)),\n    path: \"/\",\n    sameSite: detect && detect.cookieCrossOrigin ? \"none\" : \"lax\",\n    secure: detect && detect.cookieCrossOrigin || detect && detect.cookieSecure\n  };\n  if (detect && detect.cookieDomain) {\n    cookieOptions.domain = detect.cookieDomain;\n  }\n  return useNuxtCookie(cookieKey, cookieOptions);\n}\nexport function getLocaleCookie(cookieRef, detect, defaultLocale) {\n  const env = import.meta.client ? \"client\" : \"server\";\n  const logger = /* @__PURE__ */ createLogger(`getLocaleCookie:${env}`);\n  __DEBUG__ && logger.log({\n    useCookie: detect && detect.useCookie,\n    cookieKey: detect && detect.cookieKey,\n    localeCodes\n  });\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  const localeCode = cookieRef.value ?? void 0;\n  if (localeCode == null) {\n    __DEBUG__ && logger.log(`none`);\n    return;\n  }\n  if (localeCodes.includes(localeCode)) {\n    __DEBUG__ && logger.log(`locale from cookie: `, localeCode);\n    return localeCode;\n  }\n  if (defaultLocale) {\n    __DEBUG__ && logger.log(`unknown locale cookie (${localeCode}), setting to defaultLocale (${defaultLocale})`);\n    cookieRef.value = defaultLocale;\n    return defaultLocale;\n  }\n  __DEBUG__ && logger.log(`unknown locale cookie (${localeCode}), unsetting cookie`);\n  cookieRef.value = void 0;\n  return;\n}\nexport function setLocaleCookie(cookieRef, locale, detect) {\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  cookieRef.value = locale;\n}\nvar DetectFailure = /* @__PURE__ */ ((DetectFailure2) => {\n  DetectFailure2[\"NOT_FOUND\"] = \"not_found_match\";\n  DetectFailure2[\"FIRST_ACCESS\"] = \"first_access_only\";\n  DetectFailure2[\"NO_REDIRECT_ROOT\"] = \"not_redirect_on_root\";\n  DetectFailure2[\"NO_REDIRECT_NO_PREFIX\"] = \"not_redirect_on_no_prefix\";\n  DetectFailure2[\"SSG_IGNORE\"] = \"detect_ignore_on_ssg\";\n  DetectFailure2[\"DISABLED\"] = \"disabled\";\n  return DetectFailure2;\n})(DetectFailure || {});\nvar DetectFrom = /* @__PURE__ */ ((DetectFrom2) => {\n  DetectFrom2[\"COOKIE\"] = \"cookie\";\n  DetectFrom2[\"NAVIGATOR_HEADER\"] = \"navigator_or_header\";\n  DetectFrom2[\"FALLBACK\"] = \"fallback\";\n  return DetectFrom2;\n})(DetectFrom || {});\nconst DefaultDetectBrowserLanguageFromResult = {\n  locale: \"\",\n  reason: \"disabled\" /* DISABLED */\n};\nexport function detectBrowserLanguage(route, localeCookie, locale = \"\") {\n  const logger = /* @__PURE__ */ createLogger(\"detectBrowserLanguage\");\n  const _detect = runtimeDetectBrowserLanguage();\n  if (!_detect) {\n    return DefaultDetectBrowserLanguageFromResult;\n  }\n  const nuxtApp = useNuxtApp();\n  const strategy = nuxtApp.$i18n.strategy;\n  const firstAccess = nuxtApp._vueI18n.__firstAccess;\n  __DEBUG__ && logger.log({ firstAccess });\n  if (isSSG && firstAccess && strategy === \"no_prefix\" && import.meta.server) {\n    return { locale: \"\", reason: \"detect_ignore_on_ssg\" /* SSG_IGNORE */ };\n  }\n  if (!firstAccess) {\n    return { locale: strategy === \"no_prefix\" ? locale : \"\", reason: \"first_access_only\" /* FIRST_ACCESS */ };\n  }\n  const { redirectOn, alwaysRedirect, useCookie, fallbackLocale } = _detect;\n  const path = isString(route) ? route : route.path;\n  __DEBUG__ && logger.log({ locale, path, strategy, alwaysRedirect, redirectOn });\n  if (strategy !== \"no_prefix\") {\n    if (redirectOn === \"root\" && path !== \"/\") {\n      __DEBUG__ && logger.log(\"not root\", { path });\n      return { locale: \"\", reason: \"not_redirect_on_root\" /* NO_REDIRECT_ROOT */ };\n    }\n    __DEBUG__ && redirectOn === \"no prefix\" && logger.log(\"no prefix -\", { path });\n    if (redirectOn === \"no prefix\" && !alwaysRedirect && path.match(getLocalesRegex(localeCodes))) {\n      return { locale: \"\", reason: \"not_redirect_on_no_prefix\" /* NO_REDIRECT_NO_PREFIX */ };\n    }\n  }\n  let from;\n  const cookieMatch = useCookie && localeCookie || void 0;\n  if (useCookie) {\n    from = \"cookie\" /* COOKIE */;\n  }\n  const browserMatch = nuxtApp.$i18n.getBrowserLocale();\n  if (!cookieMatch) {\n    from = \"navigator_or_header\" /* NAVIGATOR_HEADER */;\n  }\n  const matchedLocale = cookieMatch || browserMatch;\n  const resolved = matchedLocale || fallbackLocale || \"\";\n  if (!matchedLocale && fallbackLocale) {\n    from = \"fallback\" /* FALLBACK */;\n  }\n  __DEBUG__ && logger.log({ locale: resolved, cookieMatch, browserMatch, from });\n  return { locale: resolved, from };\n}\nexport function getHost() {\n  let host;\n  if (import.meta.client) {\n    host = window.location.host;\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"x-forwarded-host\", \"host\"]);\n    let detectedHost;\n    if (\"x-forwarded-host\" in header) {\n      detectedHost = header[\"x-forwarded-host\"];\n    } else if (\"host\" in header) {\n      detectedHost = header[\"host\"];\n    }\n    host = isArray(detectedHost) ? detectedHost[0] : detectedHost;\n  }\n  return host;\n}\nexport function getLocaleDomain(locales, strategy, route) {\n  const logger = /* @__PURE__ */ createLogger(`getLocaleDomain`);\n  let host = getHost() || \"\";\n  const routePath = isObject(route) ? route.path : isString(route) ? route : \"\";\n  if (host) {\n    __DEBUG__ && logger.log(`locating domain for host`, { host, strategy, path: routePath });\n    let matchingLocale;\n    const matchingLocales = locales.filter((locale) => {\n      if (locale && locale.domain) {\n        let domain = locale.domain;\n        if (hasProtocol(locale.domain)) {\n          domain = locale.domain.replace(/(http|https):\\/\\//, \"\");\n        }\n        return domain === host;\n      } else if (Array.isArray(locale?.domains)) {\n        return locale.domains.includes(host);\n      }\n      return false;\n    });\n    if (matchingLocales.length === 1) {\n      matchingLocale = matchingLocales[0];\n      __DEBUG__ && logger.log(`found one matching domain`, { host, matchedLocale: matchingLocales[0].code });\n    } else if (matchingLocales.length > 1) {\n      if (strategy === \"no_prefix\") {\n        console.warn(\n          formatMessage(\n            \"Multiple matching domains found! This is not supported for no_prefix strategy in combination with differentDomains!\"\n          )\n        );\n        matchingLocale = matchingLocales[0];\n      } else {\n        if (route) {\n          __DEBUG__ && logger.log(`check matched domain for locale match`, { path: routePath, host });\n          if (routePath && routePath !== \"\") {\n            const matches = routePath.match(getLocalesRegex(matchingLocales.map((l) => l.code)));\n            if (matches && matches.length > 1) {\n              matchingLocale = matchingLocales.find((l) => l.code === matches[1]);\n              __DEBUG__ && logger.log(`matched locale from path`, { matchedLocale: matchingLocale?.code });\n            }\n          }\n        }\n        if (!matchingLocale) {\n          matchingLocale = matchingLocales.find(\n            (l) => Array.isArray(l.defaultForDomains) ? l.defaultForDomains.includes(host) : l.domainDefault\n          );\n          __DEBUG__ && logger.log(`no locale matched - using default for this domain`, { matchedLocale: matchingLocale?.code });\n        }\n      }\n    }\n    if (matchingLocale) {\n      return matchingLocale.code;\n    } else {\n      host = \"\";\n    }\n  }\n  return host;\n}\nexport function getDomainFromLocale(localeCode) {\n  const runtimeConfig = useRuntimeConfig();\n  const nuxtApp = useNuxtApp();\n  const host = getHost();\n  const config = runtimeConfig.public.i18n;\n  const lang = normalizedLocales.find((locale) => locale.code === localeCode);\n  const domain = config?.domainLocales?.[localeCode]?.domain || lang?.domain || lang?.domains?.find((v) => v === host);\n  if (domain) {\n    if (hasProtocol(domain, { strict: true })) {\n      return domain;\n    }\n    let protocol;\n    if (import.meta.server) {\n      const {\n        node: { req }\n      } = useRequestEvent(nuxtApp);\n      protocol = req && isHTTPS(req) ? \"https:\" : \"http:\";\n    } else {\n      protocol = new URL(window.location.origin).protocol;\n    }\n    return protocol + \"//\" + domain;\n  }\n  console.warn(formatMessage(\"Could not find domain name for locale \" + localeCode));\n}\nexport const runtimeDetectBrowserLanguage = (opts = useRuntimeConfig().public.i18n) => {\n  if (opts?.detectBrowserLanguage === false) return false;\n  return opts?.detectBrowserLanguage;\n};\nexport function setupMultiDomainLocales(nuxtContext, defaultLocaleDomain) {\n  const { multiDomainLocales, strategy, routesNameSeparator, defaultLocaleRouteNameSuffix } = nuxtContext.$config.public.i18n;\n  if (!multiDomainLocales) return;\n  if (!(strategy === \"prefix_except_default\" || strategy === \"prefix_and_default\")) return;\n  const router = useRouter();\n  const defaultRouteSuffix = [routesNameSeparator, defaultLocaleRouteNameSuffix].join(\"\");\n  for (const route of router.getRoutes()) {\n    const routeName = getRouteName(route.name);\n    if (routeName.endsWith(defaultRouteSuffix)) {\n      router.removeRoute(routeName);\n      continue;\n    }\n    const routeNameLocale = routeName.split(routesNameSeparator)[1];\n    if (routeNameLocale === defaultLocaleDomain) {\n      router.addRoute({\n        ...route,\n        path: route.path === `/${routeNameLocale}` ? \"/\" : route.path.replace(`/${routeNameLocale}`, \"\")\n      });\n    }\n  }\n}\nexport function getDefaultLocaleForDomain(nuxtContext) {\n  const { locales, defaultLocale, multiDomainLocales } = nuxtContext.$config.public.i18n;\n  let defaultLocaleDomain = defaultLocale || \"\";\n  if (!multiDomainLocales) {\n    return defaultLocaleDomain;\n  }\n  const host = getHost();\n  const hasDefaultForDomains = locales.some(\n    (l) => typeof l !== \"string\" && Array.isArray(l.defaultForDomains)\n  );\n  if (hasDefaultForDomains) {\n    const findDefaultLocale = locales.find(\n      (l) => typeof l === \"string\" || !Array.isArray(l.defaultForDomains) ? false : l.defaultForDomains.includes(host ?? \"\")\n    );\n    defaultLocaleDomain = findDefaultLocale?.code ?? \"\";\n  }\n  return defaultLocaleDomain;\n}\n"],"version":3}