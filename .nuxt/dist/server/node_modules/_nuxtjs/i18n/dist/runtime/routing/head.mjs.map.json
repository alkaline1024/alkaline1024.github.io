{"file":"head.mjs","mappings":"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","names":[],"sources":["../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/head.js"],"sourcesContent":["import { joinURL } from \"ufo\";\nimport { isArray, isObject } from \"@intlify/shared\";\nimport { unref, useNuxtApp, useRuntimeConfig } from \"#imports\";\nimport { getNormalizedLocales } from \"./utils.js\";\nimport { getRouteBaseName, localeRoute, switchLocalePath } from \"./routing.js\";\nimport { getComposer } from \"../compatibility.js\";\nexport function creatHeadContext({ key, seo }) {\n  const nuxtApp = useNuxtApp();\n  const { defaultDirection } = useRuntimeConfig().public.i18n;\n  const locale = unref(nuxtApp.$i18n.locale);\n  const locales = getNormalizedLocales(unref(nuxtApp.$i18n.locales));\n  const currentLocale = locales.find((l) => l.code === locale) || { code: locale };\n  return {\n    key,\n    seo,\n    locale,\n    locales,\n    currentDir: currentLocale.dir || defaultDirection,\n    currentLocale,\n    currentLanguage: currentLocale.language,\n    baseUrl: getBaseUrl()\n  };\n}\nexport function localeHead(common, { dir = true, lang = true, seo = true, key = \"hid\" }) {\n  const metaObject = {\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  };\n  const ctx = creatHeadContext({ seo, key });\n  if (!ctx.baseUrl) {\n    console.warn(\"I18n `baseUrl` is required to generate valid SEO tag links.\");\n  }\n  if (ctx.locales == null || ctx.baseUrl == null) {\n    return metaObject;\n  }\n  if (dir) {\n    metaObject.htmlAttrs.dir = ctx.currentDir;\n  }\n  if (lang && ctx.currentLanguage) {\n    metaObject.htmlAttrs.lang = ctx.currentLanguage;\n  }\n  if (seo && ctx.locale && ctx.locales) {\n    metaObject.link.push(\n      ...getHreflangLinks(common, ctx),\n      ...getCanonicalLink(common, ctx)\n    );\n    metaObject.meta.push(\n      ...getOgUrl(common, ctx),\n      ...getCurrentOgLocale(ctx),\n      ...getAlternateOgLocales(ctx)\n    );\n  }\n  return metaObject;\n}\nfunction getBaseUrl() {\n  const nuxtApp = useNuxtApp();\n  const i18n = getComposer(nuxtApp.$i18n);\n  return joinURL(unref(i18n.baseUrl), nuxtApp.$config.app.baseURL);\n}\nexport function getHreflangLinks(common, ctx) {\n  const { defaultLocale, strategy } = useRuntimeConfig().public.i18n;\n  const links = [];\n  if (strategy === \"no_prefix\") return links;\n  const localeMap = /* @__PURE__ */ new Map();\n  for (const locale of ctx.locales) {\n    if (!locale.language) {\n      console.warn(\"Locale `language` ISO code is required to generate alternate link\");\n      continue;\n    }\n    const [language, region] = locale.language.split(\"-\");\n    if (language && region && (locale.isCatchallLocale || !localeMap.has(language))) {\n      localeMap.set(language, locale);\n    }\n    localeMap.set(locale.language, locale);\n  }\n  const strictCanonicals = common.runtimeConfig.public.i18n.experimental.alternateLinkCanonicalQueries === true;\n  const routeWithoutQuery = strictCanonicals ? common.router.resolve({ query: {} }) : void 0;\n  if (!common.runtimeConfig.public.i18n.experimental.switchLocalePathLinkSSR && strictCanonicals) {\n    routeWithoutQuery.meta = common.router.currentRoute.value.meta;\n  }\n  for (const [language, mapLocale] of localeMap.entries()) {\n    const localePath = switchLocalePath(common, mapLocale.code, routeWithoutQuery);\n    const canonicalQueryParams = getCanonicalQueryParams(common, ctx);\n    let href = toAbsoluteUrl(localePath, ctx.baseUrl);\n    if (canonicalQueryParams && strictCanonicals) {\n      href = `${href}?${canonicalQueryParams}`;\n    }\n    if (localePath) {\n      links.push({\n        [ctx.key]: `i18n-alt-${language}`,\n        rel: \"alternate\",\n        href,\n        hreflang: language\n      });\n    }\n  }\n  if (defaultLocale) {\n    const localePath = switchLocalePath(common, defaultLocale, routeWithoutQuery);\n    const canonicalQueryParams = getCanonicalQueryParams(common, ctx);\n    let href = toAbsoluteUrl(localePath, ctx.baseUrl);\n    if (canonicalQueryParams && strictCanonicals) {\n      href = `${href}?${canonicalQueryParams}`;\n    }\n    if (localePath) {\n      links.push({\n        [ctx.key]: \"i18n-xd\",\n        rel: \"alternate\",\n        href,\n        hreflang: \"x-default\"\n      });\n    }\n  }\n  return links;\n}\nexport function getCanonicalUrl(common, ctx) {\n  const route = common.router.currentRoute.value;\n  const currentRoute = localeRoute(common, {\n    ...route,\n    path: void 0,\n    name: getRouteBaseName(common, route)\n  });\n  if (!currentRoute) return \"\";\n  let href = toAbsoluteUrl(currentRoute.path, ctx.baseUrl);\n  const canonicalQueryParams = getCanonicalQueryParams(common, ctx);\n  if (canonicalQueryParams) {\n    href = `${href}?${canonicalQueryParams}`;\n  }\n  return href;\n}\nexport function getCanonicalLink(common, ctx) {\n  const href = getCanonicalUrl(common, ctx);\n  if (!href) return [];\n  return [{ [ctx.key]: \"i18n-can\", rel: \"canonical\", href }];\n}\nexport function getCanonicalQueryParams(common, ctx) {\n  const route = common.router.currentRoute.value;\n  const currentRoute = localeRoute(common, {\n    ...route,\n    path: void 0,\n    name: getRouteBaseName(common, route)\n  });\n  const canonicalQueries = isObject(ctx.seo) && ctx.seo.canonicalQueries || [];\n  const currentRouteQueryParams = currentRoute?.query || {};\n  const params = new URLSearchParams();\n  for (const queryParamName of canonicalQueries) {\n    if (queryParamName in currentRouteQueryParams) {\n      const queryParamValue = currentRouteQueryParams[queryParamName];\n      if (isArray(queryParamValue)) {\n        queryParamValue.forEach((v) => params.append(queryParamName, v || \"\"));\n      } else {\n        params.append(queryParamName, queryParamValue || \"\");\n      }\n    }\n  }\n  return params.toString() || void 0;\n}\nexport function getOgUrl(common, ctx) {\n  const href = getCanonicalUrl(common, ctx);\n  if (!href) return [];\n  return [{ [ctx.key]: \"i18n-og-url\", property: \"og:url\", content: href }];\n}\nexport function getCurrentOgLocale(ctx) {\n  if (!ctx.currentLocale || !ctx.currentLanguage) return [];\n  return [{ [ctx.key]: \"i18n-og\", property: \"og:locale\", content: hyphenToUnderscore(ctx.currentLanguage) }];\n}\nexport function getAlternateOgLocales(ctx) {\n  const alternateLocales = ctx.locales.filter((locale) => locale.language && locale.language !== ctx.currentLanguage);\n  return alternateLocales.map((locale) => ({\n    [ctx.key]: `i18n-og-alt-${locale.language}`,\n    property: \"og:locale:alternate\",\n    content: hyphenToUnderscore(locale.language)\n  }));\n}\nfunction hyphenToUnderscore(str) {\n  return (str || \"\").replace(/-/g, \"_\");\n}\nfunction toAbsoluteUrl(urlOrPath, baseUrl) {\n  if (urlOrPath.match(/^https?:\\/\\//)) return urlOrPath;\n  return joinURL(baseUrl, urlOrPath);\n}\n"],"version":3}