import { executeAsync } from "/home/alkaline1024/Documents/portfolio-chanawat/node_modules/unctx/dist/index.mjs";
import { unref } from "vue";
import { makeFallbackLocaleCodes } from "../messages.mjs";
import { createLocaleFromRouteGetter } from "../routing/utils.mjs";
import { detectLocale, loadAndSetLocale, detectRedirect, navigate } from "../utils.mjs";
import { addRouteMiddleware, defineNuxtRouteMiddleware } from "../../../../../nuxt/dist/app/composables/router.mjs";
import { defineNuxtPlugin } from "../../../../../nuxt/dist/app/nuxt.mjs";
const route_locale_detect__HPHJq3Jg7gwhwgKEI8tQavopSAjmrCSPXl9HgL2h9U = defineNuxtPlugin({
  name: "i18n:plugin:route-locale-detect",
  dependsOn: ["i18n:plugin"],
  async setup(nuxt) {
    let __temp, __restore;
    const nuxtApp = nuxt;
    const currentRoute = nuxtApp.$router.currentRoute;
    const getRouteLocale = createLocaleFromRouteGetter();
    async function handleRouteDetect(to) {
      let detected = detectLocale(to, getRouteLocale(to), unref(nuxtApp.$i18n.locale), nuxtApp.$i18n.getLocaleCookie());
      if (nuxtApp._vueI18n.__firstAccess) {
        nuxtApp._vueI18n.__setLocale(detected);
        const fallbackLocales = makeFallbackLocaleCodes(unref(nuxtApp._vueI18n.global.fallbackLocale), [detected]);
        await Promise.all(fallbackLocales.map((x) => nuxtApp.$i18n.loadLocaleMessages(x)));
        await nuxtApp.$i18n.loadLocaleMessages(detected);
      }
      const modified = await nuxtApp.runWithContext(() => loadAndSetLocale(detected, nuxtApp._vueI18n.__firstAccess));
      if (modified) {
        detected = unref(nuxtApp.$i18n.locale);
      }
      return detected;
    }
    [__temp, __restore] = executeAsync(() => handleRouteDetect(currentRoute.value)), await __temp, __restore();
    const localeChangeMiddleware = defineNuxtRouteMiddleware(async (to, from) => {
      let __temp2, __restore2;
      const locale = ([__temp2, __restore2] = executeAsync(() => nuxtApp.runWithContext(() => handleRouteDetect(to))), __temp2 = await __temp2, __restore2(), __temp2);
      const redirectPath = ([__temp2, __restore2] = executeAsync(() => nuxtApp.runWithContext(
        () => detectRedirect({ to, from, locale, routeLocale: getRouteLocale(to) }, true)
      )), __temp2 = await __temp2, __restore2(), __temp2);
      nuxtApp._vueI18n.__firstAccess = false;
      return [__temp2, __restore2] = executeAsync(() => nuxtApp.runWithContext(() => navigate({ nuxtApp, redirectPath, locale, route: to }))), __temp2 = await __temp2, __restore2(), __temp2;
    });
    addRouteMiddleware("locale-changing", localeChangeMiddleware, { global: true });
  }
});
export {
  route_locale_detect__HPHJq3Jg7gwhwgKEI8tQavopSAjmrCSPXl9HgL2h9U as default
};
//# sourceMappingURL=route-locale-detect.mjs.map
