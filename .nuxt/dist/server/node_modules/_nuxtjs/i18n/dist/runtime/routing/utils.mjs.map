{"version":3,"file":"utils.mjs","sources":["../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/utils.js"],"sourcesContent":["import { isFunction } from \"@intlify/shared\";\nimport { localeCodes } from \"#build/i18n.options.mjs\";\nimport { useRuntimeConfig } from \"#app\";\nexport function getNormalizedLocales(locales) {\n  return locales.map((x) => typeof x === \"string\" ? { code: x } : x);\n}\nexport function getRouteName(routeName) {\n  if (typeof routeName === \"string\") return routeName;\n  if (routeName != null) return routeName.toString();\n  return \"(null)\";\n}\nexport function getLocaleRouteName(routeName, locale, {\n  defaultLocale,\n  strategy,\n  routesNameSeparator,\n  defaultLocaleRouteNameSuffix,\n  differentDomains\n}) {\n  const localizedRoutes = strategy !== \"no_prefix\" || differentDomains;\n  let name = getRouteName(routeName) + (localizedRoutes ? routesNameSeparator + locale : \"\");\n  if (locale === defaultLocale && strategy === \"prefix_and_default\") {\n    name += routesNameSeparator + defaultLocaleRouteNameSuffix;\n  }\n  return name;\n}\nexport function resolveBaseUrl(baseUrl, context) {\n  if (isFunction(baseUrl)) {\n    return baseUrl(context);\n  }\n  return baseUrl;\n}\nfunction matchBrowserLocale(locales, browserLocales) {\n  const matchedLocales = [];\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const matchedLocale = locales.find((l) => l.language.toLowerCase() === browserCode.toLowerCase());\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 1 - index / browserLocales.length });\n      break;\n    }\n  }\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const languageCode = browserCode.split(\"-\")[0].toLowerCase();\n    const matchedLocale = locales.find((l) => l.language.split(\"-\")[0].toLowerCase() === languageCode);\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 0.999 - index / browserLocales.length });\n      break;\n    }\n  }\n  return matchedLocales;\n}\nfunction compareBrowserLocale(a, b) {\n  if (a.score === b.score) {\n    return b.code.length - a.code.length;\n  }\n  return b.score - a.score;\n}\nexport function findBrowserLocale(locales, browserLocales, {\n  matcher = matchBrowserLocale,\n  comparer = compareBrowserLocale\n} = {}) {\n  const normalizedLocales = [];\n  for (const l of locales) {\n    const { code } = l;\n    const language = l.language || code;\n    normalizedLocales.push({ code, language });\n  }\n  const matchedLocales = matcher(normalizedLocales, browserLocales);\n  if (matchedLocales.length === 0) {\n    return \"\";\n  }\n  if (matchedLocales.length > 1) {\n    matchedLocales.sort(comparer);\n  }\n  return matchedLocales[0].code;\n}\nexport function getLocalesRegex(localeCodes2) {\n  return new RegExp(`^/(${localeCodes2.join(\"|\")})(?:/|$)`, \"i\");\n}\nconst localesPattern = `(${localeCodes.join(\"|\")})`;\nconst regexpPath = getLocalesRegex(localeCodes);\nexport function createLocaleFromRouteGetter() {\n  const { routesNameSeparator, defaultLocaleRouteNameSuffix } = useRuntimeConfig().public.i18n;\n  const defaultSuffixPattern = `(?:${routesNameSeparator}${defaultLocaleRouteNameSuffix})?`;\n  const regexpName = new RegExp(`${routesNameSeparator}${localesPattern}${defaultSuffixPattern}$`, \"i\");\n  const getLocaleFromRoute = (route) => {\n    let matches = null;\n    if (typeof route === \"string\") {\n      matches = route.match(regexpPath);\n      return matches?.[1] ?? \"\";\n    }\n    if (route.name) {\n      matches = getRouteName(route.name).match(regexpName);\n    } else if (route.path) {\n      matches = route.path.match(regexpPath);\n    }\n    return matches?.[1] ?? \"\";\n  };\n  return getLocaleFromRoute;\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}