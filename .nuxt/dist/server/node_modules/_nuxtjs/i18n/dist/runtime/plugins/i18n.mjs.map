{"version":3,"file":"i18n.mjs","sources":["../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/plugins/i18n.js"],"sourcesContent":["import { computed, isRef, ref, watch } from \"vue\";\nimport { createI18n } from \"vue-i18n\";\nimport { defineNuxtPlugin, useNuxtApp } from \"#imports\";\nimport {\n  localeCodes,\n  vueI18nConfigs,\n  isSSG,\n  hasPages,\n  localeLoaders,\n  parallelPlugin,\n  normalizedLocales\n} from \"#build/i18n.options.mjs\";\nimport { loadVueI18nOptions, loadLocale } from \"../messages.js\";\nimport { loadAndSetLocale, detectRedirect, navigate, extendBaseUrl, createNuxtI18nDev } from \"../utils.js\";\nimport {\n  getBrowserLocale,\n  getLocaleCookie,\n  setLocaleCookie,\n  getI18nCookie,\n  runtimeDetectBrowserLanguage,\n  getDefaultLocaleForDomain,\n  setupMultiDomainLocales,\n  wrapComposable,\n  defineGetter\n} from \"../internal.js\";\nimport { createLocaleFromRouteGetter, resolveBaseUrl } from \"../routing/utils.js\";\nimport { extendI18n } from \"../routing/i18n.js\";\nimport { createLogger } from \"#nuxt-i18n/logger\";\nimport { getI18nTarget } from \"../compatibility.js\";\nimport { resolveRoute } from \"../routing/routing.js\";\nimport { localeHead } from \"../routing/head.js\";\nimport { useLocalePath, useLocaleRoute, useRouteBaseName, useSwitchLocalePath, useLocaleLocation } from \"../composables/index.js\";\nexport default defineNuxtPlugin({\n  name: \"i18n:plugin\",\n  parallel: parallelPlugin,\n  async setup(nuxt) {\n    const logger = /* @__PURE__ */ createLogger(\"plugin:i18n\");\n    const nuxtApp = nuxt;\n    const currentRoute = nuxtApp.$router.currentRoute;\n    const defaultLocaleDomain = getDefaultLocaleForDomain(nuxtApp);\n    setupMultiDomainLocales(nuxtApp, defaultLocaleDomain);\n    const runtimeI18n = {\n      ...nuxtApp.$config.public.i18n,\n      defaultLocale: defaultLocaleDomain\n    };\n    nuxtApp.$config.public.i18n.defaultLocale = defaultLocaleDomain;\n    runtimeI18n.baseUrl = extendBaseUrl();\n    const _detectBrowserLanguage = runtimeDetectBrowserLanguage();\n    __DEBUG__ && logger.log(\"isSSG\", isSSG);\n    __DEBUG__ && logger.log(\"useCookie on setup\", _detectBrowserLanguage && _detectBrowserLanguage.useCookie);\n    __DEBUG__ && logger.log(\"defaultLocale on setup\", runtimeI18n.defaultLocale);\n    const vueI18nOptions = await loadVueI18nOptions(vueI18nConfigs, useNuxtApp());\n    vueI18nOptions.messages = vueI18nOptions.messages || {};\n    for (const l of localeCodes) {\n      vueI18nOptions.messages[l] ??= {};\n    }\n    vueI18nOptions.fallbackLocale = vueI18nOptions.fallbackLocale ?? false;\n    if (defaultLocaleDomain) {\n      vueI18nOptions.locale = defaultLocaleDomain;\n    }\n    const getRouteLocale = createLocaleFromRouteGetter();\n    const localeCookie = getI18nCookie();\n    const i18n = createI18n(vueI18nOptions);\n    i18n.__firstAccess = true;\n    i18n.__setLocale = (locale) => {\n      const i = getI18nTarget(i18n);\n      if (isRef(i.locale)) {\n        i.locale.value = locale;\n      } else {\n        i.locale = locale;\n      }\n    };\n    nuxtApp._vueI18n = i18n;\n    if (import.meta.dev) {\n      nuxtApp._nuxtI18nDev = createNuxtI18nDev();\n    }\n    extendI18n(i18n, {\n      extendComposer(composer) {\n        const _locales = ref(runtimeI18n.locales);\n        const _localeCodes = ref(localeCodes);\n        const _baseUrl = ref(\"\");\n        composer.locales = computed(() => _locales.value);\n        composer.localeCodes = computed(() => _localeCodes.value);\n        composer.baseUrl = computed(() => _baseUrl.value);\n        if (import.meta.client) {\n          watch(\n            composer.locale,\n            () => {\n              _baseUrl.value = resolveBaseUrl(runtimeI18n.baseUrl, nuxtApp);\n            },\n            { immediate: true }\n          );\n        } else {\n          _baseUrl.value = resolveBaseUrl(runtimeI18n.baseUrl, nuxtApp);\n        }\n        composer.strategy = runtimeI18n.strategy;\n        composer.localeProperties = computed(\n          () => normalizedLocales.find((l) => l.code === composer.locale.value) || { code: composer.locale.value }\n        );\n        composer.setLocale = async (locale) => {\n          await loadAndSetLocale(locale, i18n.__firstAccess);\n          if (composer.strategy === \"no_prefix\" || !hasPages) {\n            await composer.loadLocaleMessages(locale);\n            i18n.__setLocale(locale);\n            return;\n          }\n          const route = currentRoute.value;\n          const redirectPath = await nuxtApp.runWithContext(\n            () => detectRedirect({ to: route, locale, routeLocale: getRouteLocale(route) })\n          );\n          __DEBUG__ && logger.log(\"redirectPath on setLocale\", redirectPath);\n          await nuxtApp.runWithContext(() => navigate({ nuxtApp, redirectPath, locale, route }, true));\n        };\n        composer.loadLocaleMessages = async (locale) => await loadLocale(locale, localeLoaders, composer.mergeLocaleMessage.bind(composer), nuxtApp);\n        composer.differentDomains = runtimeI18n.differentDomains;\n        composer.defaultLocale = runtimeI18n.defaultLocale;\n        composer.getBrowserLocale = () => getBrowserLocale();\n        composer.getLocaleCookie = () => getLocaleCookie(localeCookie, _detectBrowserLanguage, composer.defaultLocale);\n        composer.setLocaleCookie = (locale) => setLocaleCookie(localeCookie, locale, _detectBrowserLanguage);\n        composer.onBeforeLanguageSwitch = (oldLocale, newLocale, initialSetup, context) => nuxt.callHook(\"i18n:beforeLocaleSwitch\", {\n          oldLocale,\n          newLocale,\n          initialSetup,\n          context\n        });\n        composer.onLanguageSwitched = (oldLocale, newLocale) => nuxt.callHook(\"i18n:localeSwitched\", { oldLocale, newLocale });\n        composer.finalizePendingLocaleChange = async () => {\n          if (!i18n.__pendingLocale) return;\n          i18n.__setLocale(i18n.__pendingLocale);\n          i18n.__resolvePendingLocalePromise?.();\n          i18n.__pendingLocale = void 0;\n        };\n        composer.waitForPendingLocaleChange = async () => {\n          if (i18n.__pendingLocale && i18n.__pendingLocalePromise) {\n            await i18n.__pendingLocalePromise;\n          }\n        };\n      },\n      extendComposerInstance(instance, c) {\n        const props = [\n          [\"locales\", () => c.locales],\n          [\"localeCodes\", () => c.localeCodes],\n          [\"baseUrl\", () => c.baseUrl],\n          [\"strategy\", () => c.strategy],\n          [\"localeProperties\", () => c.localeProperties],\n          [\"setLocale\", () => async (locale) => Reflect.apply(c.setLocale, c, [locale])],\n          [\"loadLocaleMessages\", () => async (locale) => Reflect.apply(c.loadLocaleMessages, c, [locale])],\n          [\"differentDomains\", () => c.differentDomains],\n          [\"defaultLocale\", () => c.defaultLocale],\n          [\"getBrowserLocale\", () => () => Reflect.apply(c.getBrowserLocale, c, [])],\n          [\"getLocaleCookie\", () => () => Reflect.apply(c.getLocaleCookie, c, [])],\n          [\"setLocaleCookie\", () => (locale) => Reflect.apply(c.setLocaleCookie, c, [locale])],\n          [\n            \"onBeforeLanguageSwitch\",\n            () => (oldLocale, newLocale, initialSetup, context) => Reflect.apply(c.onBeforeLanguageSwitch, c, [oldLocale, newLocale, initialSetup, context])\n          ],\n          [\n            \"onLanguageSwitched\",\n            () => (oldLocale, newLocale) => Reflect.apply(c.onLanguageSwitched, c, [oldLocale, newLocale])\n          ],\n          [\"finalizePendingLocaleChange\", () => () => Reflect.apply(c.finalizePendingLocaleChange, c, [])],\n          [\"waitForPendingLocaleChange\", () => () => Reflect.apply(c.waitForPendingLocaleChange, c, [])]\n        ];\n        for (const [key, get] of props) {\n          Object.defineProperty(instance, key, { get });\n        }\n      }\n    });\n    nuxt.vueApp.use(i18n);\n    defineGetter(nuxtApp, \"$i18n\", getI18nTarget(i18n));\n    return {\n      provide: {\n        /**\n         * TODO: remove type assertions while type narrowing based on generated types\n         */\n        localeHead: wrapComposable(localeHead),\n        localePath: useLocalePath(),\n        localeRoute: useLocaleRoute(),\n        getRouteBaseName: useRouteBaseName(),\n        switchLocalePath: useSwitchLocalePath(),\n        // TODO: remove in v10\n        resolveRoute: wrapComposable(resolveRoute),\n        // TODO: remove in v10\n        localeLocation: useLocaleLocation()\n      }\n    };\n  }\n});\n"],"names":["__executeAsync","_a"],"mappings":"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","x_google_ignoreList":[0]}