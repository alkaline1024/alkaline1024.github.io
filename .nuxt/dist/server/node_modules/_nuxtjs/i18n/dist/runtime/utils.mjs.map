{"version":3,"file":"utils.mjs","sources":["../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/utils.js"],"sourcesContent":["import { joinURL, isEqual } from \"ufo\";\nimport { isFunction } from \"@intlify/shared\";\nimport { navigateTo, useNuxtApp, useRouter, useRuntimeConfig, useState } from \"#imports\";\nimport {\n  NUXT_I18N_MODULE_ID,\n  isSSG,\n  localeCodes,\n  localeLoaders,\n  normalizedLocales,\n  vueI18nConfigs\n} from \"#build/i18n.options.mjs\";\nimport {\n  detectBrowserLanguage,\n  getLocaleDomain,\n  getDomainFromLocale,\n  runtimeDetectBrowserLanguage,\n  getHost\n} from \"./internal.js\";\nimport { loadAndSetLocaleMessages, loadLocale, loadVueI18nOptions, makeFallbackLocaleCodes } from \"./messages.js\";\nimport { localePath, switchLocalePath } from \"./routing/routing.js\";\nimport { createLogger } from \"#nuxt-i18n/logger\";\nimport { unref } from \"vue\";\nimport { createLocaleFromRouteGetter } from \"./routing/utils.js\";\nimport { getComposer } from \"./compatibility.js\";\nexport function initCommonComposableOptions(i18n) {\n  return {\n    i18n: i18n ?? useNuxtApp().$i18n,\n    router: useRouter(),\n    runtimeConfig: useRuntimeConfig(),\n    metaState: useState(\"nuxt-i18n-meta\", () => ({}))\n  };\n}\nexport async function loadAndSetLocale(newLocale, initial = false) {\n  const logger = /* @__PURE__ */ createLogger(\"loadAndSetLocale\");\n  const nuxtApp = useNuxtApp();\n  const { differentDomains, skipSettingLocaleOnNavigate } = nuxtApp.$config.public.i18n;\n  const opts = runtimeDetectBrowserLanguage();\n  const oldLocale = unref(nuxtApp.$i18n.locale);\n  const localeCodes2 = unref(nuxtApp.$i18n.localeCodes);\n  function syncCookie(locale = oldLocale) {\n    if (opts === false || !opts.useCookie) return;\n    if (skipSettingLocaleOnNavigate) return;\n    nuxtApp.$i18n.setLocaleCookie(locale);\n  }\n  const localeOverride = await nuxtApp.$i18n.onBeforeLanguageSwitch(oldLocale, newLocale, initial, nuxtApp);\n  if (localeOverride && localeCodes2.includes(localeOverride)) {\n    if (oldLocale === localeOverride) {\n      syncCookie();\n      return false;\n    }\n    newLocale = localeOverride;\n  }\n  __DEBUG__ && logger.log({ newLocale, oldLocale, initial });\n  if (!newLocale) {\n    syncCookie();\n    return false;\n  }\n  if (!initial && differentDomains) {\n    syncCookie();\n    return false;\n  }\n  if (oldLocale === newLocale) {\n    syncCookie();\n    return false;\n  }\n  const i18nFallbackLocales = unref(nuxtApp.$i18n.fallbackLocale);\n  const setter = nuxtApp.$i18n.mergeLocaleMessage.bind(nuxtApp.$i18n);\n  if (i18nFallbackLocales) {\n    const fallbackLocales = makeFallbackLocaleCodes(i18nFallbackLocales, [newLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadLocale(locale, localeLoaders, setter, nuxtApp)));\n  }\n  await loadLocale(newLocale, localeLoaders, setter, nuxtApp);\n  if (skipSettingLocaleOnNavigate) {\n    return false;\n  }\n  syncCookie(newLocale);\n  nuxtApp._vueI18n.__setLocale(newLocale);\n  await nuxtApp.$i18n.onLanguageSwitched(oldLocale, newLocale);\n  return true;\n}\nexport function detectLocale(route, routeLocale, currentLocale, localeCookie) {\n  const nuxtApp = useNuxtApp();\n  const { strategy, defaultLocale, differentDomains, multiDomainLocales } = nuxtApp.$config.public.i18n;\n  const _detectBrowserLanguage = runtimeDetectBrowserLanguage();\n  const logger = /* @__PURE__ */ createLogger(\"detectLocale\");\n  const detectedBrowser = detectBrowserLanguage(route, localeCookie, currentLocale);\n  __DEBUG__ && logger.log({ detectBrowserLanguage: detectedBrowser });\n  if (detectedBrowser.locale && detectedBrowser.from != null && localeCodes.includes(detectedBrowser.locale)) {\n    return detectedBrowser.locale;\n  }\n  let detected = \"\";\n  __DEBUG__ && logger.log(\"1/3\", { detected, strategy });\n  if (differentDomains || multiDomainLocales) {\n    detected ||= getLocaleDomain(normalizedLocales, strategy, route);\n  } else if (strategy !== \"no_prefix\") {\n    detected ||= routeLocale;\n  }\n  __DEBUG__ && logger.log(\"2/3\", { detected, detectBrowserLanguage: _detectBrowserLanguage });\n  const cookieLocale = (localeCodes.includes(detectedBrowser.locale) || localeCookie && localeCodes.includes(localeCookie)) && _detectBrowserLanguage && _detectBrowserLanguage.useCookie && localeCookie;\n  detected ||= cookieLocale || currentLocale || defaultLocale || \"\";\n  __DEBUG__ && logger.log(\"3/3\", { detected, cookieLocale, defaultLocale, localeCookie });\n  return detected;\n}\nexport function detectRedirect({ to, from, locale, routeLocale }, inMiddleware = false) {\n  if (routeLocale === locale || useNuxtApp().$i18n.strategy === \"no_prefix\") {\n    return \"\";\n  }\n  const common = initCommonComposableOptions();\n  const logger = /* @__PURE__ */ createLogger(\"detectRedirect\");\n  __DEBUG__ && logger.log({ to, from });\n  __DEBUG__ && logger.log({ locale, routeLocale, inMiddleware });\n  let redirectPath = switchLocalePath(common, locale, to);\n  if (inMiddleware && !redirectPath) {\n    redirectPath = localePath(common, to.fullPath, locale);\n  }\n  if (isEqual(redirectPath, to.fullPath) || from && isEqual(redirectPath, from.fullPath)) {\n    return \"\";\n  }\n  return redirectPath;\n}\nconst useRedirectState = () => useState(NUXT_I18N_MODULE_ID + \":redirect\", () => \"\");\nexport async function navigate({ nuxtApp, locale, route, redirectPath }, enableNavigate = false) {\n  const { rootRedirect, differentDomains, multiDomainLocales, skipSettingLocaleOnNavigate, locales, strategy } = nuxtApp.$config.public.i18n;\n  const logger = /* @__PURE__ */ createLogger(\"navigate\");\n  __DEBUG__ && logger.log(\"options\", { rootRedirect, differentDomains, skipSettingLocaleOnNavigate, enableNavigate, isSSG });\n  if (route.path === \"/\" && rootRedirect) {\n    let redirectCode = 302;\n    if (typeof rootRedirect === \"string\") {\n      redirectPath = \"/\" + rootRedirect;\n    } else {\n      redirectPath = \"/\" + rootRedirect.path;\n      redirectCode = rootRedirect.statusCode;\n    }\n    redirectPath = nuxtApp.$localePath(redirectPath, locale);\n    __DEBUG__ && logger.log(\"rootRedirect mode\", { redirectPath, redirectCode });\n    return navigateTo(redirectPath, { redirectCode });\n  }\n  if (import.meta.client && skipSettingLocaleOnNavigate) {\n    nuxtApp._vueI18n.__pendingLocale = locale;\n    nuxtApp._vueI18n.__pendingLocalePromise = new Promise((resolve) => {\n      nuxtApp._vueI18n.__resolvePendingLocalePromise = () => resolve();\n    });\n    if (!enableNavigate) {\n      return;\n    }\n  }\n  if (multiDomainLocales && strategy === \"prefix_except_default\") {\n    const host = getHost();\n    const currentDomain = locales.find((locale2) => {\n      if (typeof locale2 === \"string\") return;\n      return locale2.defaultForDomains?.find((domain) => domain === host);\n    });\n    const defaultLocaleForDomain = typeof currentDomain !== \"string\" ? currentDomain?.code : void 0;\n    if (route.path.startsWith(`/${defaultLocaleForDomain}`)) {\n      return navigateTo(route.path.replace(`/${defaultLocaleForDomain}`, \"\"));\n    }\n    if (!route.path.startsWith(`/${locale}`) && locale !== defaultLocaleForDomain) {\n      const getLocaleFromRoute = createLocaleFromRouteGetter();\n      const oldLocale = getLocaleFromRoute(route.path);\n      if (oldLocale !== \"\") {\n        return navigateTo(`/${locale + route.path.replace(`/${oldLocale}`, \"\")}`);\n      }\n      return navigateTo(`/${locale + (route.path === \"/\" ? \"\" : route.path)}`);\n    }\n    if (redirectPath && route.path !== redirectPath) {\n      return navigateTo(redirectPath);\n    }\n    return;\n  }\n  if (differentDomains) {\n    const state = useRedirectState();\n    __DEBUG__ && logger.log(\"redirect\", { state: state.value, redirectPath });\n    if (state.value && state.value !== redirectPath) {\n      if (import.meta.client) {\n        state.value = \"\";\n        window.location.assign(redirectPath);\n      }\n      if (import.meta.server) {\n        __DEBUG__ && logger.log(\"differentDomains servermode\", { redirectPath });\n        state.value = redirectPath;\n      }\n    }\n  } else if (redirectPath) {\n    return navigateTo(redirectPath);\n  }\n}\nfunction prefixable({ currentLocale, defaultLocale, strategy }) {\n  return (\n    // strategy has no prefixes\n    strategy !== \"no_prefix\" && // strategy should not prefix default locale\n    !(currentLocale === defaultLocale && (strategy === \"prefix_and_default\" || strategy === \"prefix_except_default\"))\n  );\n}\nexport function extendPrefixable(runtimeConfig = useRuntimeConfig()) {\n  const logger = /* @__PURE__ */ createLogger(\"extendPrefixable\");\n  return (opts) => {\n    const _prefixable = prefixable(opts);\n    __DEBUG__ && logger.log(_prefixable);\n    return _prefixable && !runtimeConfig.public.i18n.differentDomains;\n  };\n}\nexport function extendSwitchLocalePathIntercepter(runtimeConfig = useRuntimeConfig()) {\n  const logger = /* @__PURE__ */ createLogger(\"extendSwitchLocalePathIntercepter\");\n  return (path, locale) => {\n    if (!runtimeConfig.public.i18n.differentDomains) {\n      return path;\n    }\n    const domain = getDomainFromLocale(locale);\n    __DEBUG__ && logger.log({ domain, path });\n    return domain && joinURL(domain, path) || path;\n  };\n}\nexport function extendBaseUrl() {\n  const logger = /* @__PURE__ */ createLogger(\"extendBaseUrl\");\n  return () => {\n    const ctx = useNuxtApp();\n    const { baseUrl, defaultLocale, differentDomains } = ctx.$config.public.i18n;\n    if (isFunction(baseUrl)) {\n      const baseUrlResult = baseUrl(ctx);\n      __DEBUG__ && logger.log(\"using localeLoader function -\", { baseUrlResult });\n      return baseUrlResult;\n    }\n    const localeCode = isFunction(defaultLocale) ? defaultLocale() : defaultLocale;\n    if (differentDomains && localeCode) {\n      const domain = getDomainFromLocale(localeCode);\n      if (domain) {\n        __DEBUG__ && logger.log(\"using differentDomains -\", { domain });\n        return domain;\n      }\n    }\n    if (baseUrl) {\n      __DEBUG__ && logger.log(\"using runtimeConfig -\", { baseUrl });\n      return baseUrl;\n    }\n    return baseUrl;\n  };\n}\nexport function getNormalizedLocales(locales) {\n  const normalized = [];\n  for (const locale of locales) {\n    if (typeof locale === \"string\") {\n      normalized.push({ code: locale });\n      continue;\n    }\n    normalized.push(locale);\n  }\n  return normalized;\n}\nexport function uniqueKeys(...objects) {\n  const keySet = /* @__PURE__ */ new Set();\n  for (const obj of objects) {\n    for (const key of Object.keys(obj)) {\n      keySet.add(key);\n    }\n  }\n  return Array.from(keySet);\n}\nexport function createNuxtI18nDev() {\n  const nuxtApp = useNuxtApp();\n  const composer = getComposer(nuxtApp._vueI18n);\n  async function resetI18nProperties(locale) {\n    const opts = await loadVueI18nOptions(vueI18nConfigs, nuxtApp);\n    const messageLocales = uniqueKeys(opts.messages || {}, composer.messages.value);\n    for (const k of messageLocales) {\n      if (locale && k !== locale) continue;\n      const current = opts.messages?.[k] || {};\n      await loadAndSetLocaleMessages(k, localeLoaders, { [k]: current }, nuxtApp);\n      composer.setLocaleMessage(k, current);\n    }\n    if (locale != null) return;\n    const numberFormatLocales = uniqueKeys(opts.numberFormats || {}, composer.numberFormats.value);\n    for (const k of numberFormatLocales) {\n      composer.setNumberFormat(k, opts.numberFormats?.[k] || {});\n    }\n    const datetimeFormatsLocales = uniqueKeys(opts.datetimeFormats || {}, composer.datetimeFormats.value);\n    for (const k of datetimeFormatsLocales) {\n      composer.setDateTimeFormat(k, opts.datetimeFormats?.[k] || {});\n    }\n  }\n  return { resetI18nProperties };\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}