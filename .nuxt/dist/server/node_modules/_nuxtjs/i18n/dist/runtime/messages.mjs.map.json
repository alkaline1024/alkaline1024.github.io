{"file":"messages.mjs","mappings":";AAEA,MAAM,oCAAoC,IAAI;AACxB,eAAA,mBAAmB,gBAAgB,MAAM;AAC7D,QAAM,iBAAiB,EAAE,UAAU,GAAG;AACtC,aAAW,cAAc,gBAAgB;AACvC,UAAM,EAAE,SAAS,SAAS,IAAI,MAAM,WAAW;AACzC,UAAA,WAAW,WAAW,QAAQ,IAAI,MAAM,KAAK,eAAe,MAAM,SAAU,CAAA,IAAI;AACtF,aAAS,UAAU,cAAc;AAAA,EAAA;AAE5B,SAAA;AACT;AACgB,SAAA,wBAAwB,UAAU,SAAS;AACrD,MAAA,aAAa,MAAO,QAAO,CAAC;AAChC,MAAI,MAAM,QAAQ,QAAQ,EAAU,QAAA;AACpC,MAAI,kBAAkB,CAAC;AACnB,MAAA,OAAO,aAAa,UAAU;AAChC,QAAI,QAAQ,MAAM,CAAC,WAAW,WAAW,QAAQ,GAAG;AAClD,sBAAgB,KAAK,QAAQ;AAAA,IAAA;AAExB,WAAA;AAAA,EAAA;AAET,QAAM,UAAU,CAAC,GAAG,SAAS,SAAS;AACtC,aAAW,UAAU,SAAS;AACxB,QAAA,UAAU,YAAY,MAAO;AACf,sBAAA,CAAC,GAAG,iBAAiB,GAAG,SAAS,MAAM,EAAE,OAAO,OAAO,CAAC;AAAA,EAAA;AAErE,SAAA;AACT;AAWA,eAAe,YAAY,QAAQ,EAAE,KAAK,KAAA,GAAQ,MAAM;AAEtD,MAAI,UAAU;AACV,MAAA;AAEI,UAAA,SAAS,MAAM,KAAO,EAAA,KAAK,CAAC,MAAM,aAAa,IAAI,EAAE,UAAU,CAAC;AAClE,QAAA,WAAW,MAAM,GAAG;AACtB,gBAAU,MAAM,KAAK,eAAe,MAAM,OAAO,MAAM,CAAC;AAAA,IAAA,OAEnD;AACK,gBAAA;AACN,UAAA,WAAW,QAAQ,iBAAiB,MAAkB;AAC1C,sBAAA,IAAI,KAAK,OAAO;AAAA,MAAA;AAAA,IAChC;AAAA,WAGK,GAAG;AACF,YAAA,MAAM,4BAA4B,EAAE,OAAO;AAAA,EAAA;AAE9C,SAAA;AACT;AACA,eAAsB,WAAW,QAAQ,eAAe,QAAQ,MAAM;AAE9D,QAAA,UAAU,cAAc,MAAM;AACpC,MAAI,WAAW,MAAM;AAEnB;AAAA,EAAA;AAEF,QAAM,gBAAgB,CAAC;AACvB,aAAW,UAAU,SAAS;AAC5B,QAAI,UAAU;AACd,QAAI,iBAAiB,cAAc,IAAI,OAAO,GAAG,KAAK,OAAO,OAAO;AAExD,gBAAA,cAAc,IAAI,OAAO,GAAG;AAAA,IAAA,OACjC;AAGK,gBAAA,MAAM,KAAK,eAAe,MAAM,YAAY,QAAQ,QAAQ,IAAI,CAAC;AAAA,IAAA;AAE7E,QAAI,WAAW,MAAM;AACnB,eAAS,SAAS,aAAa;AAAA,IAAA;AAAA,EACjC;AAEF,SAAO,QAAQ,aAAa;AAC9B;","names":[],"sources":["../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/messages.js"],"sourcesContent":["import { deepCopy, isFunction } from \"@intlify/shared\";\nimport { createLogger } from \"#nuxt-i18n/logger\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = isFunction(resolver) ? await nuxt.runWithContext(() => resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  if (fallback === false) return [];\n  if (Array.isArray(fallback)) return fallback;\n  let fallbackLocales = [];\n  if (typeof fallback === \"string\") {\n    if (locales.every((locale) => locale !== fallback)) {\n      fallbackLocales.push(fallback);\n    }\n    return fallbackLocales;\n  }\n  const targets = [...locales, \"default\"];\n  for (const locale of targets) {\n    if (locale in fallback == false) continue;\n    fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options, nuxt) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages, nuxt)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages, nuxt)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }, nuxt) {\n  const logger = /* @__PURE__ */ createLogger(\"loadMessage\");\n  let message = null;\n  try {\n    __DEBUG__ && logger.log({ locale });\n    const getter = await load().then((r) => \"default\" in r ? r.default : r);\n    if (isFunction(getter)) {\n      message = await nuxt.runWithContext(() => getter(locale));\n      __DEBUG__ && logger.log(\"dynamic load\", logger.level >= 999 ? message : \"\");\n    } else {\n      message = getter;\n      if (message != null && cacheMessages && !import.meta.dev) {\n        cacheMessages.set(key, message);\n      }\n      __DEBUG__ && logger.log(\"loaded\", logger.level >= 999 ? message : \"\");\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter, nuxt) {\n  const logger = /* @__PURE__ */ createLogger(\"loadLocale\");\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    __DEBUG__ && logger.warn(\"Could not find locale file messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      __DEBUG__ && logger.log(loader.key + \" is already loaded\");\n      message = cacheMessages.get(loader.key);\n    } else {\n      __TEST__ && !loader.cache && logger.log(loader.key + \" bypassing cache!\");\n      __DEBUG__ && logger.log(loader.key + \" is loading ...\");\n      message = await nuxt.runWithContext(() => loadMessage(locale, loader, nuxt));\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages, nuxt) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter, nuxt);\n}\n"],"version":3}