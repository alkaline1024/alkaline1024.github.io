{"file":"index.mjs","mappings":";;;;;;;;AAsGO,SAAS,mBAAmB;AACjC,SAAO,eAAe,gBAAgB;AACxC;AACO,SAAS,gBAAgB;AAC9B,SAAO,eAAe,UAAU;AAClC;AACO,SAAS,iBAAiB;AAC/B,SAAO,eAAe,WAAW;AACnC;AACO,SAAS,oBAAoB;AAClC,SAAO,eAAe,WAAW;AACnC;AACO,SAAS,sBAAsB;AACpC,SAAO,eAAe,gBAAgB;AACxC;","names":[],"sources":["../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/composables/index.js"],"sourcesContent":["import { useRequestHeaders, useCookie as useNuxtCookie } from \"#imports\";\nimport { ref, computed, watch, onUnmounted } from \"vue\";\nimport { parseAcceptLanguage, wrapComposable, runtimeDetectBrowserLanguage } from \"../internal.js\";\nimport { DEFAULT_DYNAMIC_PARAMS_KEY, localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { useHead } from \"#imports\";\nimport { initCommonComposableOptions } from \"../utils.js\";\nimport {\n  creatHeadContext,\n  getAlternateOgLocales,\n  getCanonicalLink,\n  getCurrentOgLocale,\n  getHreflangLinks,\n  getOgUrl,\n  localeHead\n} from \"../routing/head.js\";\nimport { getRouteBaseName, localePath, localeRoute, switchLocalePath } from \"../routing/routing.js\";\nimport { findBrowserLocale } from \"../routing/utils.js\";\nimport { getComposer } from \"../compatibility.js\";\nexport * from \"vue-i18n\";\nexport * from \"./shared.js\";\nexport function useSetI18nParams(seo) {\n  const common = initCommonComposableOptions();\n  const head = useHead({});\n  const router = common.router;\n  const ctx = creatHeadContext({ key: \"id\", seo });\n  const _i18nParams = ref({});\n  const experimentalSSR = common.runtimeConfig.public.i18n.experimental.switchLocalePathLinkSSR;\n  const i18nParams = computed({\n    get() {\n      return experimentalSSR ? common.metaState.value : router.currentRoute.value.meta[DEFAULT_DYNAMIC_PARAMS_KEY] ?? {};\n    },\n    set(val) {\n      common.metaState.value = val;\n      _i18nParams.value = val;\n      router.currentRoute.value.meta[DEFAULT_DYNAMIC_PARAMS_KEY] = val;\n    }\n  });\n  const stop = watch(\n    () => router.currentRoute.value.fullPath,\n    () => {\n      router.currentRoute.value.meta[DEFAULT_DYNAMIC_PARAMS_KEY] = experimentalSSR ? common.metaState.value : _i18nParams.value;\n    }\n  );\n  onUnmounted(() => {\n    stop();\n  });\n  if (!ctx.baseUrl) {\n    console.warn(\"I18n `baseUrl` is required to generate valid SEO tag links.\");\n  }\n  const setMeta = () => {\n    if (!ctx.locale || !ctx.locales) {\n      head?.patch({});\n      return;\n    }\n    head?.patch({\n      link: [...getHreflangLinks(common, ctx), ...getCanonicalLink(common, ctx)],\n      meta: [...getOgUrl(common, ctx), ...getCurrentOgLocale(ctx), ...getAlternateOgLocales(ctx)]\n    });\n  };\n  return function(params) {\n    i18nParams.value = { ...params };\n    setMeta();\n  };\n}\nexport function useLocaleHead({\n  dir = true,\n  lang = true,\n  seo = true,\n  key = \"hid\"\n} = {}) {\n  const common = initCommonComposableOptions();\n  const metaObject = ref({\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  });\n  function cleanMeta() {\n    metaObject.value = {\n      htmlAttrs: {},\n      link: [],\n      meta: []\n    };\n  }\n  function updateMeta() {\n    metaObject.value = localeHead(common, { dir, lang, seo, key });\n  }\n  if (import.meta.client) {\n    const i18n = getComposer(common.i18n);\n    const stop = watch(\n      [() => common.router.currentRoute.value, i18n.locale],\n      () => {\n        cleanMeta();\n        updateMeta();\n      },\n      { immediate: true }\n    );\n    onUnmounted(() => stop());\n  } else {\n    updateMeta();\n  }\n  return metaObject;\n}\nexport function useRouteBaseName() {\n  return wrapComposable(getRouteBaseName);\n}\nexport function useLocalePath() {\n  return wrapComposable(localePath);\n}\nexport function useLocaleRoute() {\n  return wrapComposable(localeRoute);\n}\nexport function useLocaleLocation() {\n  return wrapComposable(localeRoute);\n}\nexport function useSwitchLocalePath() {\n  return wrapComposable(switchLocalePath);\n}\nexport function useBrowserLocale() {\n  const headers = useRequestHeaders([\"accept-language\"]);\n  return findBrowserLocale(\n    normalizedLocales,\n    import.meta.client ? navigator.languages : parseAcceptLanguage(headers[\"accept-language\"] || \"\")\n  ) || null;\n}\nexport function useCookieLocale() {\n  const locale = ref(\"\");\n  const detect = runtimeDetectBrowserLanguage();\n  if (detect && detect.useCookie) {\n    const cookieKey = detect.cookieKey;\n    let code = null;\n    if (import.meta.client) {\n      code = useNuxtCookie(cookieKey).value;\n    } else if (import.meta.server) {\n      const cookie = useRequestHeaders([\"cookie\"]);\n      code = cookie[cookieKey];\n    }\n    if (code && localeCodes.includes(code)) {\n      locale.value = code;\n    }\n  }\n  return locale;\n}\nconst warnRuntimeUsage = (method) => console.warn(\n  method + \"() is a compiler-hint helper that is only usable inside the script block of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.\"\n);\nexport function defineI18nRoute(route) {\n  if (import.meta.dev) {\n    warnRuntimeUsage(\"defineI18nRoute\");\n  }\n}\n"],"version":3}