{"file":"colors.mjs","mappings":";;;;;AAGA,MAAM,SAAS,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AACpE,SAAS,SAAS,OAAO,OAAO;AAC1B,MAAA,SAAS,UAAU,OAAO,OAAO,KAAK,MAAM,YAAY,SAAS,OAAO,KAAK,GAAG;AAC3E,WAAA,OAAO,KAAK,EAAE,KAAK;AAAA,EAAA;AAErB,SAAA;AACT;AACA,SAAS,eAAe,KAAK,OAAO;AAC3B,SAAA,GAAG,OAAO,IAAI,CAAC,UAAU,cAAc,GAAG,IAAI,KAAK,iBAAiB,UAAU,YAAY,gBAAgB,KAAK,IAAI,KAAK,KAAK,SAAS,OAAO,KAAK,CAAC,IAAI,EAAE,KAAK,MAAM,CAAC;AAC9K;AACA,SAAS,cAAc,KAAK,OAAO;AACjC,SAAO,QAAQ,GAAG,oBAAoB,GAAG,IAAI,KAAK;AACpD;AACA,MAAe,qDAAA,iBAAiB,MAAM;AACpC,QAAM,YAAY,aAAa;AACf,aAAW;AACrB,QAAA,OAAO,SAAS,MAAM;AAC1B,UAAM,EAAE,SAAS,GAAG,QAAQ,IAAI,UAAU,GAAG;AACtC,WAAA;AAAA;AAAA,IAEP,OAAO,QAAQ,UAAU,GAAG,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,eAAe,KAAK,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC;AAAA;AAAA;AAAA,IAGlG,OAAO,KAAK,OAAO,EAAE,IAAI,CAAC,QAAQ,cAAc,KAAK,GAAG,CAAC,EAAE,KAAK,MAAM,CAAC;AAAA;AAAA;AAAA,IAGvE,OAAO,KAAK,OAAO,EAAE,IAAI,CAAC,QAAQ,cAAc,KAAK,GAAG,CAAC,EAAE,KAAK,MAAM,CAAC;AAAA;AAAA;AAAA,EAAA,CAGxE;AACD,QAAM,WAAW;AAAA,IACf,OAAO,CAAC;AAAA,MACN,WAAW,MAAM,KAAK;AAAA,MACtB,aAAa;AAAA,MACb,IAAI;AAAA,IACL,CAAA;AAAA,EACH;AAUA,UAAQ,QAAQ;AAClB,CAAC;","names":[],"sources":["../../../../../../../../../node_modules/@nuxt/ui/dist/runtime/plugins/colors.js"],"sourcesContent":["import { computed } from \"vue\";\nimport colors from \"tailwindcss/colors\";\nimport { defineNuxtPlugin, useAppConfig, useNuxtApp, useHead } from \"#imports\";\nconst shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];\nfunction getColor(color, shade) {\n  if (color in colors && typeof colors[color] === \"object\" && shade in colors[color]) {\n    return colors[color][shade];\n  }\n  return \"\";\n}\nfunction generateShades(key, value) {\n  return `${shades.map((shade) => `--ui-color-${key}-${shade}: var(--color-${value === \"neutral\" ? \"old-neutral\" : value}-${shade}, ${getColor(value, shade)});`).join(\"\\n  \")}`;\n}\nfunction generateColor(key, shade) {\n  return `--ui-${key}: var(--ui-color-${key}-${shade});`;\n}\nexport default defineNuxtPlugin(() => {\n  const appConfig = useAppConfig();\n  const nuxtApp = useNuxtApp();\n  const root = computed(() => {\n    const { neutral, ...colors2 } = appConfig.ui.colors;\n    return `@layer base {\n  :root {\n  ${Object.entries(appConfig.ui.colors).map(([key, value]) => generateShades(key, value)).join(\"\\n  \")}\n  }\n  :root, .light {\n  ${Object.keys(colors2).map((key) => generateColor(key, 500)).join(\"\\n  \")}\n  }\n  .dark {\n  ${Object.keys(colors2).map((key) => generateColor(key, 400)).join(\"\\n  \")}\n  }\n}`;\n  });\n  const headData = {\n    style: [{\n      innerHTML: () => root.value,\n      tagPriority: -2,\n      id: \"nuxt-ui-colors\"\n    }]\n  };\n  if (import.meta.client && nuxtApp.isHydrating && !nuxtApp.payload.serverRendered) {\n    const style = document.createElement(\"style\");\n    style.innerHTML = root.value;\n    style.setAttribute(\"data-nuxt-ui-colors\", \"\");\n    document.head.appendChild(style);\n    headData.script = [{\n      innerHTML: \"document.head.removeChild(document.querySelector('[data-nuxt-ui-colors]'))\"\n    }];\n  }\n  useHead(headData);\n});\n"],"version":3}